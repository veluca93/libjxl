// Copyright (c) the JPEG XL Project Authors. All rights reserved.
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
/* This file is automatically generated. Do not modify it directly. */
#if HWY_TARGET != HWY_NEON
#error "only include this file from fast_dct-inl.h"
#endif

constexpr size_t FastIDCTIntegerBits(FastDCTTag<8>) { return 1; }

void FastIDCT(FastDCTTag<8>, const float* in, size_t in_stride, float* out,
              size_t out_stride, size_t count) {
  JXL_ASSERT(count % 8 == 0);
  HWY_FULL(float) df;
  for (size_t i = 0; i < count; i += 8) {
    auto v0 = Load(df, in + in_stride * 0 + i);
    auto v1 = Load(df, in + in_stride * 4 + i);
    auto v2 = v0 + v1;
    auto v3 = Load(df, in + in_stride * 2 + i);
    auto v4_tmp = v3 * Set(df, 0.41421356237309515);
    auto v4 = v4_tmp + v3;
    auto v5 = Load(df, in + in_stride * 6 + i);
    auto v6 = v5 + v3;
    auto v7 = v4 + v6;
    auto v8 = v7 * Set(df, 0.541196100146197);
    auto v9 = v2 + v8;
    auto v10 = Load(df, in + in_stride * 1 + i);
    auto v11_tmp = v10 * Set(df, 0.41421356237309515);
    auto v11 = v11_tmp + v10;
    auto v12 = Load(df, in + in_stride * 5 + i);
    auto v13 = Load(df, in + in_stride * 3 + i);
    auto v14 = v12 + v13;
    auto v15 = v11 + v14;
    auto v16 = v13 + v10;
    auto v17 = v16 * Set(df, 0.7653668647301797);
    auto v18 = Load(df, in + in_stride * 7 + i);
    auto v19 = v18 + v12;
    auto v20 = v16 + v19;
    auto v21 = v20 * Set(df, 0.541196100146197);
    auto v22 = v17 + v21;
    auto v23 = v15 + v22;
    auto v24 = v23 * Set(df, 0.5097955791041591);
    auto v25 = v9 + v24;
    auto v26 = v0 - v1;
    auto v27 = v4 - v6;
    auto v28_tmp = v27 * Set(df, 0.30656296487637635);
    auto v28 = v28_tmp + v27;
    auto v29 = v26 + v28;
    auto v30 = v11 - v14;
    auto v31 = v16 * Set(df, 0.5411961001461972);
    auto v32_tmp = v19 * Set(df, 0.30656296487637613);
    auto v32 = v32_tmp + v19;
    auto v33 = v31 - v32;
    auto v34 = v30 + v33;
    auto v35 = v34 * Set(df, 0.6013448869350453);
    auto v36 = v29 + v35;
    auto v37 = v26 - v28;
    auto v38 = v30 - v33;
    auto v39 = v38 * Set(df, 0.8999762231364156);
    auto v40 = v37 + v39;
    auto v41 = v2 - v8;
    auto v42 = v15 - v22;
    auto v43_tmp = v42 * Set(df, 0.5629154477415055);
    auto v43 = MulAdd(v42, Set(df, 2), v43_tmp);
    auto v44 = v41 + v43;
    auto v45 = v41 - v43;
    auto v46 = v37 - v39;
    auto v47 = v29 - v35;
    auto v48 = v9 - v24;
    Store(v25, df, out + out_stride * 0 + i);
    Store(v36, df, out + out_stride * 1 + i);
    Store(v40, df, out + out_stride * 2 + i);
    Store(v44, df, out + out_stride * 3 + i);
    Store(v45, df, out + out_stride * 4 + i);
    Store(v46, df, out + out_stride * 5 + i);
    Store(v47, df, out + out_stride * 6 + i);
    Store(v48, df, out + out_stride * 7 + i);
  }
}
